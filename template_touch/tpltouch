#!/usr/bin/env python
# filetype python

import argparse
import os
import os.path
import shutil
import sys

def perr(s):
    sys.stderr.write("%s\n" % s)

def get_template_dir():
    # FIXME: make parameterizable
    template_dir = os.path.expanduser('~/.tpltouch/templates')

    if not os.path.isdir(template_dir):
        perr('template directory %s either does not exist or is not a directory' % template_dir)
        sys.exit(4)

    return template_dir

def list_available_templates():
    print 'Available templates:'
    template_dir = get_template_dir()
    print os.listdir(template_dir)


def paste_from_local_file(template_name, target_name, edit_after=False, verbose=False):

    if os.path.exists(target_name):
        perr('target file %s already exists. aborting' % target_name)
        return -3

    template_dir = get_template_dir()
    template = os.path.join(template_dir, template_name)

    if not os.path.exists(template):
        perr('template %s does not exists' % template_name)
        return -1

    if verbose:
        print 'From template %s create %s' % (template_name, target_name)

    shutil.copyfile(template, target_name)

    if edit_after:
        if os.getenv('EDITOR') is None:
            print '$EDITOR is not set'
            return -1
        os.system('%s "%s"' % (os.getenv('EDITOR'), target_name))

    return 0


def parse_arguments(args):

    normal_mode = '-l' in args

    parser = argparse.ArgumentParser(description='Template generator')
    parser.add_argument('-v', '--verbose', action='store_true', default=False)
    parser.add_argument('-l', '--list', action='store_true', help='List available templates (only local supported)')
    #parser.add_argument('-e', '--edit', action='store_true', help='Edit generated file after pasting')
    #parser.add_argument('-d', '--local-dir',  help='~/.tpltouch/templates')
    # FIXME: don't  depend on -l to add the arguments (how to do it with argparse?)
    if not normal_mode:
        parser.add_argument('-t', '--type', choices=['git', 'local'], default='local', help='Type of source for templates')
        parser.add_argument('source', help='Name of sorce template')
        parser.add_argument('target', help='Target file or directory for pasted files')

    return parser, parser.parse_args(args)


def main(args):

    argparse, ctx = parse_arguments(args)
    if not (ctx.list or (ctx.source and ctx.target)):
        argparse.print_help()
        return -2
    if ctx.list:
        list_available_templates()
        return -2

    return paste_from_local_file(ctx.source, ctx.target, edit_after=False, verbose=ctx.verbose)

if __name__ == '__main__':
    exit(main(sys.argv[1:]))

